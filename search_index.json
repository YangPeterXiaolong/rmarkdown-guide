[["index.html", "R Markdown 指南 前言", " R Markdown 指南 王祎帆 闫求识 高春辉 庄亮亮 2021-12-05 前言 "],["rmarkdown-intro.html", "第 1 章 R Markdown概述 1.1 R Markdown 的渊源 1.2 以案例形式初识 R Markdown", " 第 1 章 R Markdown概述 1.1 R Markdown 的渊源 1.1.1 knitr 和 Sweave 1.1.2 标记语言和 Pandoc 转换器 1.2 以案例形式初识 R Markdown 1.2.1 数据分析报告 1.2.2 交互笔记本 1.2.3 个人简历 1.2.4 网站 1.2.5 幻灯片 1.2.6 交互报表 1.2.7 动态文档 "],["rmarkdown-base.html", "第 2 章 R Markdown 的基础知识 2.1 R Studio 相关的配置 2.2 R Markdown 的安装 2.3 R Markdown 的编译过程 2.4 R Markdown 的基本元素 2.5 页面设置和布局 2.6 R Markdown 的文档元素", " 第 2 章 R Markdown 的基础知识 2.1 R Studio 相关的配置 2.2 R Markdown 的安装 2.2.1 安装 R Markdown 2.2.2 安装 Tinytex 要想使用 R Markdown 输出 PDF 格式的文档，必须事先安装 LaTeX。LaTeX 有很多发行版，如 MiKTex，MacTeX， TeX Live 等，建议 R Markdown 的用户使用 TinyTeX。 TinyTeX 是一个瘦身版的 TeX Live，去掉了 TeX Live 中对普通用户毫无用处的源代码和文档。通过命令行模式，它的安装要简单的多。 knitr::include_graphics(&quot;images/logo-tinytex.png&quot;) 图 2.1: TinyTex 是一个瘦身版的 TeX Live 要安装 TinyTeX，只需要在 R 语言终端输入两条命令即可1。 # 安装 tinytex install.packages(&quot;tinytex&quot;) # 安装 TinyTex 套件 tinytex::install_tinytex() 如果 TinyTeX 本身的下载安装就很慢，或在 R 里面下载不完整，那么可以用浏览器或其它下载工具直接下载：https://github.com/yihui/tinytex-releases/releases 然后把下载的文件路径传给安装函数，比如： # 假设下载文件所在的位置是 ~/Downloads/TinyTeX-v2021.01.zip tinytex:::install_prebuilt(&#39;~/Downloads/TinyTeX-v2021.01.zip&#39;) 安装完成后，在 RStudio 中打开之前保存的 R Markdown 源文档，将第三行 output_format: html_document 更改为 output_format: pdf_document。点击 Knit 后，生成如下两页 PDF 文档，说明安装成功。 2.2.2.1 安装 LaTeX 组件 rmarkdown 包从版本 1.9 开始，编译 R Markdown 为 PDF 时会调用 TinyTeX。因此，对 R Markdown 用户来说，编译 PDF 是出错的头号原因可能在于缺失某些 LaTeX 包。 LaTeX 包（也被称为“package”）是 LaTeX 的组件，数目非常多，可以用来扩展 LaTeX 的功能。tinytex::install_tinytex() 默认只安装了必须的一些组件，在实际使用过程中经常会出现缺少组件的错误。 如果知道包的名称，那么可以直接使用下面的命令安装。这里值得注意的是，对于国内的用户来说，通常需要设定一下 LaTeX 软件仓库的位置。下面的例子中，使用了清华大学的 TeX Live 镜像。 # 安装需要的 LaTeX 组件 tinytex::tlmgr_repo(url = &quot;https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet&quot;) tinytex::tlmgr_install(c(&#39;pgf&#39;, &#39;preview&#39;, &#39;xcolor&#39;)) 如果不知道包的名称也没有关系，tinytex 也提供了相应的函数来帮助用户从报错信息中找到解决方法。tinytex::parse_install() 提供两种方法，第一种是通过准确的错误提示，第二种是通过分析 log 文件。如果嫌 log 太长或者找不到具体提示信息，还可以使用第二种办法。 # 假如有相关报错信息 &quot;! LaTeX Error: File `preview.sty&#39; not found.&quot; tinytex::parse_install(text = &quot;! LaTeX Error: File `preview.sty&#39; not found.&quot;) # 假如错误 log 名为 tex.log tinytex::parse_install(log = &quot;tex.log&quot;) 2.2.3 安装 Git（*） {#install-git} Git 是一个分布式版本控制软件，最初由 Linus Torvalds 开发2，于 2005 年以 GPL 协议发布。Git 软件可以在其官方网站下载（https://git-scm.com/downloads）。为了与 Git 配合使用，通常还需要注册一个支持 Git 软件仓库托管的配套网站，比较流行网站服务包括 GitHub（https://github.com），Gitee（https://gitee.com/）等。在这里以 GitHub 为例进行说明。 图 2.2: 使用 Git 和 GitHub 可以提高团队协作的效率 2.2.3.1 配置 Git 和 GitHub 在 Windows 下面3，安装完 Git 客户端之后，鼠标右键菜单中会多出来两个命令：“Git GUI Here”和“Git Bash Here”。前者打开一个图形界面，后者打开一个终端，通过这两个命令都可以进入 Git。 首先需要配置 Git 的用户信息。 # 全局配置 $ git config --global user.name &quot;your name&quot; $ git config --global user.email &quot;xxx@xxx.xxx&quot; # 本地配置 $ git config user.name &quot;your name&quot; # 查看配置 $ git config --list # 查看指定项 $ git config user.name 为了能够使用 GitHub 提供的服务，需要先注册一个账号（https://github.com/signup）。 2.2.3.2 使用 Git Git 常用的命令有下面几个： git init sample 在当前目录新建一个“sample”目录，在目录中启用 Git 版本控制系统。 git clone https://github.com/cosname/rmarkdown-guide.git 从 GitHub 克隆一个软件仓库到当前目录。这将在当前目录新建一个“rmarkdown-guide”文件夹，其中包含所有文件和版本历史。 git status 显示当前 Git 仓库的状态。如果有修改，新建，删除等操作，将会自动列举出来。 git add newfile.Rmd newfile.Rmd 是一个新建的文件，其中有一些新增的代码。该命令将其加入 Git 追踪的文件清单中。 git commit 或者 git commit -a 这个命令将执行一次 Commit 操作，系统会打开默认的文本编辑器，以填写本次 Commit 操作涉及的工作内容。 git push 将本地仓库的修改推送到远程仓库中去。要执行该命令，本地仓库需要关联一个远程仓库，并且用户对该远程仓库具有修改权限（使用 git remote -v 查看本地仓库关联的远程仓库地址）。 git pull 将本地仓库的内容与远程仓库同步（这是远程仓库的文件比本地仓库的文件版本新）。 2.2.3.3 配置 Git 远程仓库的 SSH 认证 SSH 密钥是成对的，包括公钥和私钥；公钥登记到 GitHub 网站，私钥存储在本地计算机（私有）。密钥在本地生成。点击鼠标右键，选择“Git Bash Here”，输入下列命令将生成一对 SSH 密钥。 默认情况下，私钥保存在“~/.ssh/id_rsa”文件中，公钥保存在 “~/.ssh/id_rsa.pub”文件中 （在 Windows 系统中的 Git bash 终端下，~ 代表用户的家目录）。 ssh-keygen cat ./.ssh/id_rsa.pub 复制这个公钥的全部内容，进入“GitHub - Setting - SSH and GPG keys”，选择“New SSH key”，将公钥粘贴进去，点击“Add SSH key”，即可完成公钥添加。 这样，以后就调用 “Git Bash Here” 时，便会自动提供私钥认证，不需要输入用户名和密码了。 2.2.3.4 使用 GitHub 在 GitHub 网站中，通常主要进行下列操作： 创建一个新的软件仓库； 点击 GitHub 右上角的“+”，选择“Create a new repository”，按照提示操作即可。这步操作其实相当于在 GitHub 服务器上新建了一个目录。目录名称是 Repository Name。目录的路径就是 &lt;username&gt;/&lt;repository_name&gt;。对应的网址（绝对路径）是 https://github.com/&lt;username&gt;/&lt;repository_name&gt;。对应的 Git 地址是 git://git@github.com/&lt;username&gt;/&lt;repository_name&gt;.git。对应的 SSH 地址是 ssh://git@github.com/&lt;username&gt;/&lt;repository_name&gt;.git。 从其他用户的软件仓库中新建一个分支，即 Fork； 在 GitHub 项目网页中，点击“Fork”即可。 为其他用户的软件仓库中贡献代码，即 Pull Request； 因为自己不具备其他用户拥有的软件仓库的编辑权限，所以无法直接通过 push 的方法提交修改。在这种情况下，用户可以首先在 GitHub 上 Fork 其他用户的软件仓库，并在自己的 Fork 中做相应修改后，通过 Pull Request 的方法提交给其他用户，经过管理员审核后，即可合并到对方的软件仓库中去。这也是团队协作共同维护一个项目时的常规操作。 第 7.2.8 节还将介绍使用 GitHub Actions 实现自动化完成持续性集成（Continuous Integration，CI）的功能。 2.2.4 安装 RStudio 图形化编辑器 2.2.5 创建第一个 R Markdown 文档 2.3 R Markdown 的编译过程 2.4 R Markdown 的基本元素 2.4.1 YAML 头部 2.4.2 Markdown 语法 2.4.3 代码区块和行内代码 2.5 页面设置和布局 2.5.1 控制输出宽度 2.5.2 换行符号 2.5.3 分页符和分割线 2.5.4 目录 2.5.5 章节编号 2.5.6 图表的索引 2.5.7 参考文献 2.6 R Markdown 的文档元素 2.6.1 图片 2.6.2 表格 2.6.3 公式 2.6.4 引用 2.6.5 字体颜色 2.6.6 动态交互元件 2.6.7 音频和视频 2.6.8 流程图 2.6.9 甘特图 "],["rmarkdown-document.html", "第 3 章 使用 R Markdown 创建常用文档 3.1 HTML 文档 3.2 PDF 文档 3.3 PPT幻灯片 3.4 Word 文档 3.5 创建新的文档格式", " 第 3 章 使用 R Markdown 创建常用文档 3.1 HTML 文档 3.1.1 目录和标题 3.1.2 主题和样式 3.1.3 图片和数据框 3.1.4 组件和内容 3.2 PDF 文档 3.2.1 从 R Markdown 到 PDF 文档 3.2.2 在 PDF 文档中使用中文的注意事项 3.2.3 LaTeX 选项 3.3 PPT幻灯片 3.3.1 R Markdown 基础幻灯片 3.3.2 Xaringan 幻灯片 3.4 Word 文档 3.4.1 创建 Word 模板 3.4.2 自定义 Word 模板 3.4.3 R Markdown 和 Word 之间的双向工作流程 3.4.4 个人风格元素 3.5 创建新的文档格式 3.5.1 从现有文档格式衍生新格式 3.5.2 完全的自定义输出格式 3.5.3 使用新的文档输出格式 "],["rmarkdown-working.html", "第 4 章 基于 R Markdown 工作与学习 4.1 发邮件：blastula 4.2 制作 R 包：fusen 4.3 制作简历：datadrivencv 4.4 写书和记学习笔记：bookdown 4.5 制作网站：blogdown 4.6 制作科技论文的支撑材料", " 第 4 章 基于 R Markdown 工作与学习 4.1 发邮件：blastula 4.2 制作 R 包：fusen 4.3 制作简历：datadrivencv 4.4 写书和记学习笔记：bookdown 4.5 制作网站：blogdown 4.6 制作科技论文的支撑材料 "],["rmarkdown-interaction.html", "第 5 章 使用 R Markdown 创建动态交互文档 5.1 Web交互界面：Shiny小程序 5.2 交互式仪表盘：Dashboards 5.3 在 R package 中使用 R Markdown", " 第 5 章 使用 R Markdown 创建动态交互文档 5.1 Web交互界面：Shiny小程序 5.1.1 Shiny 入门指南 5.1.2 Shiny 的部署 5.1.3 嵌入 Shiny 应用程序 5.1.4 Shiny 小部件 5.1.5 Shiny 文档间的链接 5.1.6 Shiny 文档的渲染 5.2 交互式仪表盘：Dashboards 5.2.1 Dashboards 入门 5.2.2 Dashboards 排版 5.2.3 Dashboards 组件 5.2.4 Dashboards 与 Shiny 5.3 在 R package 中使用 R Markdown 5.3.1 写软件包的文档 5.3.2 定义一个自动化报告函数 "],["rmarkdown-operation.html", "第 6 章 R Markdown 的操作技巧 6.1 表格操作进阶 6.2 块选项 6.3 与其他语言的结合 6.4 输出钩子 (*) {#output-hook} 6.5 其它使用 knitr 的小技巧 (*) {#other-trick}", " 第 6 章 R Markdown 的操作技巧 6.1 表格操作进阶 在日常报告中，表格是展示结果的主要方式之一，例如下表展示了某中学某次考试的学生成绩： 姓名 语文 数学 英语 张三 89 93 92 李四 90 97 85 王五 85 91 97 然而，该成绩表并不美观，例如有些人习惯将内容居中，一般情况下给表格添加标题会更容易让人读懂，即得到表 6.1 的结果： 表 6.1: 考试成绩 姓名 语文 数学 英语 张三 89 93 92 李四 90 97 85 王五 85 91 97 除了居中操作以及添加标题外，在制作表格时还会产生各种各样的特定需求，例如合并单元格、添加底色等。本章将系统地介绍在 R Markdown 中生成表格和进一步对其个性化的方法，主要包括下列内容： 介绍表格生成函数 knitr::kable() 的所有特征； 使用 kableExtra (Zhu 2021) 包来展现更高级的个性化制作方法； 提供其它生成表格的 R 包以供读者参考。 6.1.1 利用函数 knitr::kable() 生成复杂的表格 在 R Markdown 中，通常使用 knitr 包中的函数 kable() 来快速创建一个表格。kable() 可以处理数据框、矩阵等“矩形数据”，快速生成表格，而表格的外观则可以通过修改函数参数来自定义，下面将对这些参数进行介绍： kable(x, format, digits = getOption(&quot;digits&quot;), row.names = NA, col.names = NA, align, caption = NULL, label = NULL, format.args = list(), escape = TRUE, ...) 6.1.1.1 目前已支持的表的格式 在大多数情况下，如果只需要制作一个简单表格，knitr::kable(x) 就足够了。其中 format 参数会根据 knitr 源文档自动设置。它可能的取值是 pipe （列与列之间由短的竖线分隔的表），simple （仅包含横向分割线 的简单表格），latex （LaTex 表格），html （HTML 表格），和 rst （reStructuredText 表格）。为了展示各个取值的不同，这里直接给出了各个取值在不同编程语言中的原始代码。 对于 R Markdown 文档，kable() 默认使用 pipe 格式的表格，输出结果如下所示： grade &lt;- data.frame(姓名 = c(&quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot;), 语文 = c(89,90,85), 数学 = c(93,97,91), 英语 = c(92,85,97)) knitr::kable(grade, &#39;pipe&#39;) |姓名 | 语文| 数学| 英语| |:----|----:|----:|----:| |张三 | 89| 93| 92| |李四 | 90| 97| 85| |王五 | 85| 91| 97| 也可以生成一个（基于 Pandoc 的）简单的表格，或 HMTL、LaTex 以及 reStructuredText 格式的表格： knitr::kable(grade, &#39;simple&#39;) 姓名 语文 数学 英语 ----- ----- ----- ----- 张三 89 93 92 李四 90 97 85 王五 85 91 97 knitr::kable(grade, &#39;html&#39;) &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th style=&quot;text-align:left;&quot;&gt; 姓名 &lt;/th&gt; &lt;th style=&quot;text-align:right;&quot;&gt; 语文 &lt;/th&gt; &lt;th style=&quot;text-align:right;&quot;&gt; 数学 &lt;/th&gt; &lt;th style=&quot;text-align:right;&quot;&gt; 英语 &lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td style=&quot;text-align:left;&quot;&gt; 张三 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 89 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 93 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 92 &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align:left;&quot;&gt; 李四 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 90 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 97 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 85 &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align:left;&quot;&gt; 王五 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 85 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 91 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 97 &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; knitr::kable(grade, &#39;latex&#39;) \\begin{tabular}{l|r|r|r} \\hline 姓名 &amp; 语文 &amp; 数学 &amp; 英语\\\\ \\hline 张三 &amp; 89 &amp; 93 &amp; 92\\\\ \\hline 李四 &amp; 90 &amp; 97 &amp; 85\\\\ \\hline 王五 &amp; 85 &amp; 91 &amp; 97\\\\ \\hline \\end{tabular} knitr::kable(grade, &#39;rst&#39;) ==== ==== ==== ==== 姓名 语文 数学 英语 ==== ==== ==== ==== 张三 89 93 92 李四 90 97 85 王五 85 91 97 ==== ==== ==== ==== 需要注意的是，只有 pipe 和 simple 格式是“可移植”的，也就是说，它们适用于任何输出文档的格式，而其他格式则只适用于特定的输出格式，例如，format = 'latex' 只适用于 LaTex 输出文档。使用特定的表格格式可以带来更多的自主控制能力，但代价是牺牲了可移植性。 如果在一个报告中，只需要一种非默认的表格格式，可以直接设置全局的 R 选项 knitr.table.format。例如若只需要 LaTex 格式的表格，则可以设置： options(knitr.table.format = &#39;latex&#39;) 这一选项也可以是一个返回格式字符串或 NULL 的函数。在 NULL 的情况下，knitr 将自动决定适当的格式。例如，可以只在输出格式为 LaTeX 时使用 latex 格式: options(knitr.table.format = function() { if (knitr::is_latex_output()) &#39;latex&#39; else &#39;pipe&#39; }) 6.1.1.2 修改表的列名 在一些情况下，在数据框（data frame）中定义的列的名称可能与想要显示给读者的内容不同，需要进行修改。在使用英文时，数据的列名通常不使用空格来分隔单词，而是使用点、下划线以及大小写来进行分隔。而在制作表格时，这样的变量名会显得有些不自然。在中文环境下，虽然空格的问题较少，但也存在变量名过长的情况，在 R 中也往往使用简化的名词或对应的英文简写来代替。在这种情况下，可以使用 col.names 参数将列名替换为一个包含新名称的向量，即 col.names = c(...)。例如，可以在上文成绩表的列名中提供更多信息： knitr::kable(grade, col.names = c(paste0(&#39;第1组&#39;, colnames(grade)))) 第1组姓名 第1组语文 第1组数学 第1组英语 张三 89 93 92 李四 90 97 85 王五 85 91 97 col.names 参数可以接受任意的字符向量（不一定是通过 paste0() 等函数修改的列名），只要向量的长度等于数据对象的列数即可，例如可以把列名换成英文： knitr::kable(grade, col.names = c(&#39;Name&#39;, &#39;Chinese&#39;, &#39;Math&#39;, &#39;English&#39;)) Name Chinese Math English 张三 89 93 92 李四 90 97 85 王五 85 91 97 6.1.1.3 指定列的对齐方式 如果想要改变表格中列的对齐方式，可以使用由字符 l （left，左对齐）、c （center，居中）以及 r （right，右对齐）组成的值向量或一个多字符的字符串来进行对齐，即 kable(..., align = c('c', 'l')) 和 kable(..., align = 'cl') 是等价的。在默认情况下，数字列是右对齐的，其他列是左对齐的。例如可以对成绩表进行调整，使得前两列右对齐，后两列左对齐： knitr::kable(grade, align = &#39;rrll&#39;) 姓名 语文 数学 英语 张三 89 93 92 李四 90 97 85 王五 85 91 97 而当对齐方式统一时，也可以用一个字母来代替，例如可以把成绩表所有列都居中表示： knitr::kable(grade, align = &#39;c&#39;) 姓名 语文 数学 英语 张三 89 93 92 李四 90 97 85 王五 85 91 97 6.1.1.4 添加表格标题 给表格添加标题需要用到 caption 参数，如表 6.2 所示： knitr::kable(grade, caption = &#39;考试成绩&#39;) 表 6.2: 考试成绩 姓名 语文 数学 英语 张三 89 93 92 李四 90 97 85 王五 85 91 97 正如本书2.6.4节所提到的那样，当一个表格有标题并且以 bookdown 来输出格式时，它可以被交叉引用，而在基础的 html_document 和 pdf_document 中则不行。 6.1.1.5 调整数字格式 有的时候，表格中的数字位数很长，展示的时候需要缩短，这时可以通过 digits 参数（会被传递给 round() 函数）来设置最大的小数位数，以及通过 format.args（会被传递给 R 中的 format() 函数）来设置其他格式化参数。 首先是几个简单的 round() 和 format() 的例子，从而可以更好地理解之后的 kable() 中 digits 参数是如何工作的: round(1.234567, 0) ## [1] 1 round(1.234567, digits = 1) ## [1] 1.2 round(1.234567, digits = 3) ## [1] 1.235 format(1000, scientific = TRUE) ## [1] &quot;1e+03&quot; format(10000.123, big.mark = &#39;,&#39;) ## [1] &quot;10,000.12&quot; 可以将数字四舍五入并格式化成表格： d = cbind(X1 = runif(3), X2 = 10^c(3, 5, 7), X3 = rnorm(3, 0, 1000)) # 保留最多四位小数 knitr::kable(d, digits = 4) X1 X2 X3 0.4513 1e+03 -300.9029 0.7838 1e+05 528.2758 0.7097 1e+07 -622.8860 # 每列分别设置 knitr::kable(d, digits = c(5, 0, 2)) X1 X2 X3 0.45127 1e+03 -300.90 0.78378 1e+05 528.28 0.70968 1e+07 -622.89 # 不使用科学计数法 knitr::kable(d, digits = 3, format.args = list(scientific = FALSE)) X1 X2 X3 0.451 1000 -300.903 0.784 100000 528.276 0.710 10000000 -622.886 # 给 big numbers 添加逗号 knitr::kable(d, digits = 3, format.args = list(big.mark = &#39;,&#39;, scientific = FALSE)) X1 X2 X3 0.451 1,000 -300.903 0.784 100,000 528.276 0.710 10,000,000 -622.886 6.1.1.6 显示缺失值 有的时候，表中可能会存在缺失值，如该学生没有缺考或没有选修某个课。在默认情况下，R 中缺失值（如NA）在表格中显示为字符串NA，如： grade2 &lt;- data.frame(姓名 = c(&quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot;), 物理 = c(NA,90,85), 政治 = c(93,97,NA), 计算机 = c(92,NA,97)) knitr::kable(grade2) # 默认显示 NA 姓名 物理 政治 计算机 张三 NA 93 92 李四 90 97 NA 王五 85 NA 97 为了表格美观，也可以使用其他的值来替换它们，或者通过使用全局 R 选项 knitr.kable.NA来调整显示的内容（例如使NA对应的单元格为空）。例如，可以将下面第一个表中的NA单元格设为空，然后在第二个表中显示**： # 用空值代替 NA opts = options(knitr.kable.NA = &#39;&#39;) knitr::kable(grade2) 姓名 物理 政治 计算机 张三 93 92 李四 90 97 王五 85 97 # 用指定字符（**） 代替 NA options(knitr.kable.NA = &#39;**&#39;) knitr::kable(grade2) 姓名 物理 政治 计算机 张三 ** 93 92 李四 90 97 ** 王五 85 ** 97 options(opts) # 恢复全局 R 选项 6.1.1.7 特殊字符的转义 HTML 或者 LaTeX 对应的编程语言之中包含了一些特殊的字符，例如在 LaTeX 中输入公式可能需要的 $ 等。为了使结果能够正常输出，kable() 将默认通过参数 escape = TRUE 来“转义”这些特殊字符，即令这些特殊字符失去其特殊含义，使得所有的字符可以逐字生成，而不会生成特殊符号（如 \\beta 将不会自动显示为 \\(\\beta\\)）。例如对于 HTML 格式的表格，&gt; 将被替换为 &amp;gt;；而对于 LaTeX 格式的表格，_ 将被转义为 \\_ 4。 如果接触过这些字符，并且知道如何正确使用它们，那么可以通过 escape = FALSE 来禁用这个参数，但要注意必须确保特殊字符不会在 LaTeX 或 HTML 中触发语法错误。表 6.3 展示了转义之后的结果，表 6.4 则展示了一些包含特殊字符（$、\\ 以及 _）的 LaTeX 数学表达式： # 添加数学表达式 g_range &lt;- data.frame(成绩范围 = c(&quot;$\\\\ge 90$&quot;,&quot;$\\\\ge 80$&quot;, &quot;$\\\\ge 70$&quot;), 语文 = c(6,10,20), 数学 = c(3,7,16), 英语 = c(5,15,20)) colnames(g_range) &lt;- c(&quot;成绩范围&quot;, &quot;$Chinese_{Jan}$&quot;, &quot;$Math_{Jan}$&quot;, &quot;$English_{Jan}$&quot;) knitr::kable(g_range, escape = TRUE, caption = &quot;escape = TRUE 生成的表&quot;) 表 6.3: escape = TRUE 生成的表 成绩范围 \\(Chinese_{Jan}\\) \\(Math_{Jan}\\) \\(English_{Jan}\\) \\(\\ge 90\\) 6 3 5 \\(\\ge 80\\) 10 7 15 \\(\\ge 70\\) 20 16 20 knitr::kable(g_range, escape = FALSE, caption = &quot;escape = FALSE 生成的表&quot;) 表 6.4: escape = FALSE 生成的表 成绩范围 \\(Chinese_{Jan}\\) \\(Math_{Jan}\\) \\(English_{Jan}\\) \\(\\ge 90\\) 6 3 5 \\(\\ge 80\\) 10 7 15 \\(\\ge 70\\) 20 16 20 如表 6.3 所示，如果设置 escape = TRUE，特殊字符将被转义或替换。例如，在 LaTeX 格式的表格中，$ 会被转义为 \\$、_ 被转义为 \\_ 以及 \\ 被替换为 \\textbackslash{}： knitr::kable(g_range[,1:2], format = &#39;latex&#39;, escape = TRUE) \\begin{tabular}{l|r} \\hline 成绩范围 &amp; \\$Chinese\\_\\{Jan\\}\\$\\\\ \\hline \\$\\textbackslash{}ge 90\\$ &amp; 6\\\\ \\hline \\$\\textbackslash{}ge 80\\$ &amp; 10\\\\ \\hline \\$\\textbackslash{}ge 70\\$ &amp; 20\\\\ \\hline \\end{tabular} 其他 LaTeX 中常见的特殊字符包括#、%、&amp;、{ 以及 }；HTML 中常见的特殊字符包括&amp;、&lt;、 &gt; 以及 \"。在生成带有 escape = FALSE 的表格时，需要格外小心并确保正确地使用了特殊字符。一个常见的错误是在使用 escape = FALSE 时，在 LaTeX 表格的列名或标题中包含 % 或 _ 等字符，而没有意识到它们是特殊的字符。 如果想知道 escape = TRUE 参数会如何转义特殊字符，可以通过 knitr 中两个内部辅助函数 escape_latex 和 escape_html 来分别查询在 LaTeX 和 HTML 格式的表格中的转义结果：。下面是一些例子： knitr:::escape_latex(c(&#39;100%&#39;, &#39;# 一个观点&#39;, &#39;文字_1&#39;)) ## [1] &quot;100\\\\%&quot; &quot;\\\\# 一个观点&quot; &quot;文字\\\\_1&quot; knitr:::escape_html(c(&#39;&lt;address&gt;&#39;, &#39;x = &quot;字符&quot;&#39;, &#39;a &amp; b&#39;)) ## [1] &quot;&amp;lt;address&amp;gt;&quot; &quot;x = &amp;quot;字符&amp;quot;&quot; &quot;a &amp;amp; b&quot; 6.1.1.8 多张表格并排 有的时候，将多张表格并排放置可以便于比较，将数据框或矩阵以列表的形式传递给 kable() 就可以实现这一功能。例如，表 6.5 包含了之前展示过的两张表： # 数据对象 grade 和 grade2 由之前的代码块生成 knitr::kable( list(grade, grade2), caption = &#39;两张表并排放置&#39;, booktabs = TRUE, valign = &#39;t&#39; ) 表 6.5: 两张表并排放置 姓名 语文 数学 英语 张三 89 93 92 李四 90 97 85 王五 85 91 97 姓名 物理 政治 计算机 张三 NA 93 92 李四 90 97 NA 王五 85 NA 97 需要注意的是，此功能仅适用于 HTML 和 PDF 格式的输出。 另外，如果在并排放置各个表的时候，想能够分别自定义它们，可以使用 kables() 函数（即 kable() 的复数形式），并将一个对象为 kable() 的列表传递给它。例如，在表 6.6 中，可以更改左表中的列名，并将右表中的小数点位数设置为 4： # 数据对象 grade 和 d 由之前的代码块生成 knitr::kables( list( # 第一个 kable()：修改列名 knitr::kable( grade, col.names = c(&#39;Name&#39;, &#39;Chinese&#39;, &#39;Math&#39;, &#39;English&#39;), valign = &#39;t&#39; ), # 第二个 kable()：设置 digits 选项 knitr::kable(d, digits = 4, valign = &#39;t&#39;) ), caption = &#39;由 knitr::kables() 生成的两张表&#39; ) 表 6.6: 由 knitr::kables() 生成的两张表 Name Chinese Math English 张三 89 93 92 李四 90 97 85 王五 85 91 97 X1 X2 X3 0.4513 1e+03 -300.9029 0.7838 1e+05 528.2758 0.7097 1e+07 -622.8860 6.1.1.9 利用for循环生成多个表 (*) 对于 kable()，有一个常见的错误认识是它不能在 for 循环中工作。这个问题并不特定于 kable()，同时也存在于许多其他的 R 包中。其背后原因较为复杂,对技术细节感兴趣的读者可以参考博文 “The Ghost Printer behind Top-level R Expressions.”。 例如，直观上下面的代码块可能可以生成三个表，但事实上它并不会： ```{r} for (i in 1:3) { knitr::kable(grade) } ``` 若想要实现生成多个表的目的，则必须显式打印 kable() 结果，并应用块选项 results = 'asis'，例如： ```{r, results=&#39;asis&#39;} for (i in 1:3) { print(knitr::kable(grade)) } ``` 通常情况下，在利用 for 循环输出结果时，最好添加一些换行符（\\n）或 HTML 注释（&lt;!-- --&gt;），从而清晰地分隔所有输出的元素，例如： ```{r, results=&#39;asis&#39;} for (i in 1:3) { print(knitr::kable(grade, caption = &#39;标题&#39;)) cat(&#39;\\n\\n&lt;!-- --&gt;\\n\\n&#39;) } ``` 如果没有这些分隔符，Pandoc 可能无法检测到单个元素。例如，当一个图片之后面紧跟着一个表格时，这个表格并不会被识别到： ![](logo.png) 姓名 语文 数学 英语 ----- ----- ----- ----- 张三 89 93 92 李四 90 97 85 王五 85 91 97 但如果像这样有一个清晰的分隔（注意，在图像下面添加了一个空行），它将变成： ![](logo.png) 姓名 语文 数学 英语 ----- ----- ----- ----- 张三 89 93 92 李四 90 97 85 王五 85 91 97 或者 ![](logo.png) &lt;!-- --&gt; 姓名 语文 数学 英语 ----- ----- ----- ----- 张三 89 93 92 李四 90 97 85 王五 85 91 97 6.1.1.10 自定义 LaTeX 表格 (*) 如果只需要 LaTeX 格式的输出时，可以在 kable() 中使用一些额外的选项。注意在其他类型的输出中（如 HTML），这些选项将被忽略。除非已经设置了全局的表格格式选项（见本书 6.1.1.1 节），否则必须像本节的例子那样使用 kable() 的 format 参数，例如： knitr::kable(grade, format = &#39;latex&#39;, booktabs = TRUE) 当给一个表格分配一个标题时（见本书 6.1.1.4 节）， kable() 将使用 table 环境来纳入这个表，即： \\begin{table} % 表格 (通常为 tabular 环境) \\end{table} 不同的环境具有不同的性质，例如熟悉 LaTeX 的读者可能了解浮动体，即某些环境下图表的位置会在页面的底部或顶部“浮动”，如 table 及 figure 等环境。可以通过 table.envir 参数来对环境进行调整： knitr::kable(grade, format = &#39;latex&#39;, table.envir = &#39;Table&#39;) \\begin{Table} \\begin{tabular}{l|r|r|r} \\hline 姓名 &amp; 语文 &amp; 数学 &amp; 英语\\\\ \\hline 张三 &amp; 89 &amp; 93 &amp; 92\\\\ \\hline 李四 &amp; 90 &amp; 97 &amp; 85\\\\ \\hline 王五 &amp; 85 &amp; 91 &amp; 97\\\\ \\hline \\end{tabular} \\end{Table} 表格的位置由参数 position 来控制。例如，可以通过 position = \"!b\" 来强制将表格固定到页面的底部： knitr::kable(grade, format = &#39;latex&#39;, table.envir = &#39;table&#39;, position = &#39;!b&#39;) \\begin{table}[!b] \\begin{tabular}{l|r|r|r} \\hline 姓名 &amp; 语文 &amp; 数学 &amp; 英语\\\\ \\hline 张三 &amp; 89 &amp; 93 &amp; 92\\\\ \\hline 李四 &amp; 90 &amp; 97 &amp; 85\\\\ \\hline 王五 &amp; 85 &amp; 91 &amp; 97\\\\ \\hline \\end{tabular} \\end{table} 当表格有标题时，也可以通过 caption.short 参数给它分配一个短的标题，例如： knitr::kable(grade, caption = &#39;一个很长很长的标题！&#39;, caption.short = &#39;短标题&#39;) 短标题将会进入 LaTeX 中 \\caption[]{} 命令的方括号中，经常在 PDF 输出文档的表格目录中使用（如果不提供短标题，那里则会显示完整的标题）。 如果熟悉用于生成可供发布（即高质量）表格的 LaTeX 包 booktabs{LaTeX package!booktabs}，则可以设置booktabs = TRUE。 knitr::kable(grade, format = &#39;latex&#39;, booktabs = TRUE) \\begin{tabular}{lrrr} \\toprule 姓名 &amp; 语文 &amp; 数学 &amp; 英语\\\\ \\midrule 张三 &amp; 89 &amp; 93 &amp; 92\\\\ 李四 &amp; 90 &amp; 97 &amp; 85\\\\ 王五 &amp; 85 &amp; 91 &amp; 97\\\\ \\bottomrule \\end{tabular} 需要注意的是，当在 R Markdown 文档中需要额外的 LaTeX 包时（如 booktabs），必须在 YAML 中声明这些包（请参阅第 3.2.3 节了解如何声明）。【！！！现有目录需要补充】 参数 booktabs 取 FALSE （默认值）或 TRUE 时，表的外观是不同的，见表 ?? 和表 ?? 。 knitr::kable(grade, format = &#39;latex&#39;, booktabs = FALSE, caption = &#39;booktabs = FALSE 时的表格&#39;) knitr::kable(grade, format = &#39;latex&#39;, booktabs = TRUE, caption = &#39;booktabs = TRUE 时的表格&#39;) 对于 booktabs = FALSE： 表的列由垂直线分隔。可以通过 vline 参数来删除垂直线，例如 knitr::kable(grade, vline = \"\") （默认值是vline = \"|\"）。也可以将这个选项设置为一个全局的R选项，这样就不需要为每个表设置它，例如 options(knitr.table.vline = \"\")。 水平线可以通过参数 toprule、midrule、linesep 以及 bottomrule 来定义，它们的默认值都是\\hline。 对于 booktabs = TRUE： 表格中没有垂直线，但可以通过 vline 参数来添加。 表格只有标题和底部行有水平线。默认参数值是 toprule = \"\\\\toprule\"、midrule = \"\\\\midrule\" 以及 bottomrule = \"\\\\bottomrule\"。默认情况下，每 5 行加一个行间距（\\addlinespace），这是由参数 linesep 控制的，默认值为 c(\"\", \"\", \"\", \"\", \"\\\\addlinespace\")。如果想每 1 行加一个 \\addlinespace，则可以这样做： knitr::kable(grade, format = &#39;latex&#39;, linesep = c(&#39;\\\\addlinespace&#39;), booktabs = TRUE) \\begin{tabular}{lrrr} \\toprule 姓名 &amp; 语文 &amp; 数学 &amp; 英语\\\\ \\midrule 张三 &amp; 89 &amp; 93 &amp; 92\\\\ \\addlinespace 李四 &amp; 90 &amp; 97 &amp; 85\\\\ \\addlinespace 王五 &amp; 85 &amp; 91 &amp; 97\\\\ \\bottomrule \\end{tabular} 如果想删除所有的行间距，可以使用linesep = ''。 有的时候，表可能比一页还长。可以使用参数 longtable = TRUE，该参数使用 LaTeX 包 longtable 将表跨到多个页面。 另外，当表格被包含在 table 环境中时（例如，当表有标题时），表格默认居中对齐。如果不想让表格居中，可以使用参数 centering = FALSE。 6.1.1.11 自定义 HTML 表格 (*) 如果想自定义通过 knitr::kable(format = \"html\") 生成的表，除了前面提到的常见参数外，只有一个额外的参数需要注意：table.attr。这个参数允许使用者向 &lt;table&gt; 标签添加任意属性。例如可以向表格中添加一个类striped： knitr::kable(grade, table.attr = &#39;class=&quot;striped&quot;&#39;, format = &quot;html&quot;) &lt;table class=&quot;striped&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th style=&quot;text-align:left;&quot;&gt; 姓名 &lt;/th&gt; &lt;th style=&quot;text-align:right;&quot;&gt; 语文 &lt;/th&gt; &lt;th style=&quot;text-align:right;&quot;&gt; 数学 &lt;/th&gt; &lt;th style=&quot;text-align:right;&quot;&gt; 英语 &lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td style=&quot;text-align:left;&quot;&gt; 张三 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 89 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 93 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 92 &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align:left;&quot;&gt; 李四 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 90 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 97 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 85 &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align:left;&quot;&gt; 王五 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 85 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 91 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 97 &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; 然而，类的名称不足以改变表的外观，必须定义 CSS5 类的规则。例如，要制作奇数行和偶数行有不同颜色的条纹表，可以为偶数行或奇数行添加浅灰色背景： .striped tr:nth-child(even) { background: #eee; } 上面的 CSS 规则意味着所有 striped 类的元素的子元素，且具有偶数行号（:nth-child(even)）的行（即 &lt;tr&gt; 标签），将它们的背景颜色设置为 #eee。 使用一点 CSS 可以使一个普通的 HTML 表看起来好看很多。图 6.1 是一个 HTML 表格的截图，其中应用了以下 CSS 规则： table { margin: auto; border-top: 1px solid #666; border-bottom: 1px solid #666; } table thead th { border-bottom: 1px solid #ddd; } th, td { padding: 5px; } thead, tfoot, tr:nth-child(even) { background: #eee; } 图 6.1: 利用 HTML 和 CSS 创建的条纹表 6.1.2 利用 kableExtra 美化表格 kableExtra 包(Zhu 2021) 设计的目的为扩展 knitr::kable() 生成表格的基本功能（见第6.1.1节）。由于 knitr::kable() 的设计很简单，就像很多其他的 R 包一样，它肯定有很多缺失的功能，而 kableExtra 完美地填补了空白，可以配合 knitr::kable() 生成更好看的表格。最令人惊讶的是，kableExtra 的大多数表格的特性都适用于 HTML 和 PDF 格式，例如，借助 kableExtra 包可以绘制如图 6.1 的条纹表。 一般情况下，kableExtra 包可以通过 CRAN 安装，也可以尝试 GitHub 上的开发版本 (https://github.com/haozhu233/kableExtra)： # 通过 CRAN 安装 install.packages(&quot;kableExtra&quot;) # 安装开发版本 remotes::install_github(&quot;haozhu233/kableExtra&quot;) https://haozhu233.github.io/kableExtra/ 提供了大量的文档，介绍了很多关于如何自定义 kable() 的 HTML 或 LaTeX 输出结果的例子。本节只提供几个示例，更多内容可参见该文档。 另外，kableExtra 包支持使用管道操作符 %&gt;%，可以将 kable() 的输出结果连到 kableExtra 的样式函数上，例如表 6.7： library(knitr) library(kableExtra) kable(grade, caption = &quot;条纹表&quot;) %&gt;% kable_styling(latex_options = &quot;striped&quot;) 表 6.7: 条纹表 姓名 语文 数学 英语 张三 89 93 92 李四 90 97 85 王五 85 91 97 6.1.2.1 设定字体尺寸 有的时候，在展示一些表格时，需要设定字体的尺寸，如放大或缩小某些特定问题。kableExtra 包中的 kable_styling() 函数可以帮助使用者对整个表进行样式化。例如，可以指定页面上表格的对齐方式、表格的宽度和字体大小。表 6.8 展示了一个使用小字体的例子： kable(grade, booktabs = TRUE, caption = &quot;字体较小的表格&quot;) %&gt;% kable_styling(font_size = 8) 表 6.8: 字体较小的表格 姓名 语文 数学 英语 张三 89 93 92 李四 90 97 85 王五 85 91 97 6.1.2.2 特定的行或列的样式 有时还需要对表格的行或列的具体样式进行调整，如加粗某行等。函数 row_spec() 和 column_spec() 可分别用于样式化单独的行和列。表 6.9 将第一行文字加粗并设为斜体，将第二行添加黑色背景，同时更改字体颜色为白色并旋转，给第三行文字加下划线并更改其字体，并给第四列加删除线： kable(grade, align = &#39;c&#39;, booktabs = TRUE, caption = &quot;更改特定行或列的样式&quot;) %&gt;% row_spec(1, bold = TRUE, italic = TRUE) %&gt;% row_spec(2, color = &#39;white&#39;, background = &#39;black&#39;, angle = 45) %&gt;% row_spec(3, underline = TRUE, monospace = TRUE) %&gt;% column_spec(4, strikeout = TRUE) 表 6.9: 更改特定行或列的样式 姓名 语文 数学 英语 张三 89 93 92 李四 90 97 85 王五 85 91 97 类似地，也可以使用 cell_spec() 函数来给单个单元格设定样式。 6.1.2.3 给行或列分组 回想 Excel 里的操作，对单元格进行合并的操作可以给行或列进行分组。在 R Markdown 中，行和列可以分别通过函数 pack_rows() 和 add_header_above() 来进行分组。另外，也可以通过 collapse_rows() 来折叠行，这样一个单元格可以跨越多个行。表 6.10 展示了一个给标题列分组后的表格： grade3 &lt;- data.frame(姓名 = c(&quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot;), 物理 = c(90,90,85), 化学 = c(86,92,80), 生物 = c(94,85,90), 政治 = c(93,97,95), 历史 = c(92,84,80), 地理 = c(99,89,95), 计算机 = c(92,95,97), 体育 = c(85,99,95)) kable(grade3, booktabs = TRUE, caption = &quot;对标题列进行分组&quot;) %&gt;% add_header_above(c(&quot; &quot; = 1, &quot;理科&quot; = 3, &quot;文科&quot; = 3, &quot;其它&quot; = 2)) 表 6.10: 对标题列进行分组 理科 文科 其它 姓名 物理 化学 生物 政治 历史 地理 计算机 体育 张三 90 86 94 93 92 99 92 85 李四 90 92 85 97 84 89 95 99 王五 85 80 90 95 80 95 97 95 对于 add_header_above() 中的命名向量，其名称是显示在表头中的文本，向量的整数值表示一个名称应该跨越多少列，例如，\"理科\" = 3 表示 理科 应该跨越三列。 表 6.11 提供了 pack_rows() 的示例，其中 index 参数的含义类似于之前解释过的 add_header_above() 参数： kable(grade3, booktabs = TRUE, caption = &quot;对行进行折叠&quot;) %&gt;% pack_rows( index = c(&quot;一班&quot; = 1, &quot;二班&quot; = 2) ) 表 6.11: 对行进行折叠 姓名 物理 化学 生物 政治 历史 地理 计算机 体育 一班 张三 90 86 94 93 92 99 92 85 二班 李四 90 92 85 97 84 89 95 99 王五 85 80 90 95 80 95 97 95 6.1.2.4 按比例缩小LaTex中的表格 有一些特性是 HTML 或 LaTeX 输出格式特有的。例如，横向打印格式只在 LaTeX 中有意义，所以 kableExtra 中的 landscape() 函数只对 LaTeX 格式的输出有效。对于一个比较宽的表格（表 6.12），（表 6.13）展现了如何将表格按比例缩小以适应页面的宽度（否则该表格会太宽）： grade4 &lt;- merge(grade, grade3, by = &quot;姓名&quot;) kable(grade4, booktabs = TRUE, caption = &quot;原始表格（太宽）&quot;) 表 6.12: 原始表格（太宽） 姓名 语文 数学 英语 物理 化学 生物 政治 历史 地理 计算机 体育 张三 89 93 92 90 86 94 93 92 99 92 85 李四 90 97 85 90 92 85 97 84 89 95 99 王五 85 91 97 85 80 90 95 80 95 97 95 kable(grade4, booktabs = TRUE, caption = &quot;缩小后的表格&quot;) %&gt;% kable_styling(latex_options = &quot;scale_down&quot;) 表 6.13: 缩小后的表格 姓名 语文 数学 英语 物理 化学 生物 政治 历史 地理 计算机 体育 张三 89 93 92 90 86 94 93 92 99 92 85 李四 90 97 85 90 92 85 97 84 89 95 99 王五 85 91 97 85 80 90 95 80 95 97 95 注意如果在浏览 HTML 版本的话，表 6.12 和表 6.13 表格是没有差异的。 6.1.3 其它生成表格的包及功能介绍 还有很多其他的R包可以用来生成表格。本章引入 kable() （见第6.1.1节）和 kableExtra （见第6.1.2节）的主要原因不是它们比其他包更好，而是因为作者们只熟悉它们，而且它们的功能可以涵盖大部分的日常使用需求。接下来本节将列出一些已知的其它软件包，感兴趣的读者可以去尝试并决定哪一个最适合自己。 flextable (R-flextable?) 和 huxtable (Hugh-Jones 2021)：flextable 和 huxtable 支持多种表格输出格式的包。它们都支持 HTML、LaTeX 以及 Office 格式，并且包含最常见的表格特性（例如条件格式化）。更多关于 flextable 的信息可参见：https://davidgohel.github.io/flextable/，huxtable 的说明文档则在：https://hughjonesd.github.io/huxtable/。 gt (R-gt?)：这个R包允许使用者将表格的不同部分组合在一起，例如表头（标题和副标题）、列标签、表格主体、行组标签以及表格的脚注，从而组成一个完整的表格，其中有些部分是可选择性添加的。还可以格式化数字，并为单元格添加背景阴影。目前 gt 主要支持 HTML 输出。6更多关于 gt 的信息可参见：https://gt.rstudio.com。 formattable (R-formattable?)：这个 R 包提供了一些格式化数字的工具函数（如 percent() 和 accounting()），以及对列进行样式化的函数（如格式化文本，用背景阴影或颜色条注释数字，或在单元格中添加图标等等）。和 gt 相同，formattable 包也主要支持HTML格式。更多信息可参见GitHub项目：https://github.com/renkun-ken/formattable/。 DT (R-DT?)：它只支持 HTML 格式。DT 构建在 JavaScript 库 DataTables 之上，它可以将静态表转换为HTML页面上的交互式表。你可以对表进行排序、搜索和分页。DT 还支持格式化单元格，与 Shiny 一起构建交互式应用程序，并包含了大量的 DataTables 扩展（例如，可以将表格导出到Excel，或交互式重新排列表格的列）。更多信息可参见：https://github.com/rstudio/DT/。 reactable (R-reactable?)：与 DT 类似，这个包也基于 JavaScript 库创建交互式表。它在某些方面比 DT 更好（比如行分组和聚合操作，以及嵌入HTML小部件），但 reactable 并不包含 DT 全部的特性。更多信息可参见：https://glin.github.io/reactable/。 rhandsontable(R-rhandsontable?)：这个包也类似于 DT，并且和 Excel 比较像（例如，可以直接在表中编辑数据）。更多信息可参见：https://jrowen.github.io/rhandsontable/。 pixiedust (R-pixiedust?)：这个包通过 broom 包(R-broom?)来为为模型结果（如线性模型）创建表格，它支持 Markdown、HTML 以及 LaTeX 输出格式。更多信息可参见：https://github.com/nutterb/pixiedust/。 stargazer (R-stargazer?)：格式化回归模型和汇总统计表。更多信息可参见：https://cran.r-project.org/package=stargazer/。 xtable (Dahl et al. 2019)；这个包可能是最早的创建表格的包，其第一次发布是在 2000 年。它同时支持LaTeX和HTML格式。该软件包可在 CRAN 上访问：https://cran.r-project.org/package=xtable/。 还有一些其它生成表格的包，这里不再进一步介绍，只是在这里列出它们，以供感兴趣者参考：tables (R-tables?)、pander (R-pander?)、tangram (R-tangram?)、ztable (R-ztable?) 以及 condformat (R-condformat?)。 6.2 块选项 6.2.1 在块选项中使用变量 6.2.2 如何在遇到 error 的时候继续编译 6.2.3 缓存代码块 6.2.4 通过 asis 引擎有条件地执行内容 6.2.5 执行 Shell 脚本 6.2.6 控制输出 6.2.7 重新格式化源代码 6.2.8 删除文本输出中的前导符号 6.2.9 为文本输出块添加属性 (*) {#chunk-property} 6.2.10 同一张图的多种图像输出格式 6.2.11 图像的后期加工 (*) {#chunk-process} 6.2.12 输出高质量的图像 (*) {#chunk-highquality} 6.2.13 带有低级绘图功能的逐步绘图 (*) {#chunk-step-plot} 6.2.14 在代码块中自定义对象的打印格式 (*) {#chunk-print} 6.2.15 选项钩子 (*) {#option-hook} 6.3 与其他语言的结合 6.3.1 注册自定义语言引擎 (*) {#register-language} 6.3.2 运行 Python 代码并与 Python 交互 6.3.3 通过 cat 引擎将块内容写入文件 6.3.4 运行 SAS 代码 6.3.5 运行 Stata 代码 6.3.6 用渐近线 Asymptote 创建图形 6.3.7 使用 Sass/SCSS 构建 HTML 页面 6.4 输出钩子 (*) {#output-hook} 6.4.1 编辑源代码 6.4.2 向源代码中添加行号 6.4.3 可滚动的文本输出 6.4.4 截断文本输出 6.4.5 以HTML5格式输出图像 6.5 其它使用 knitr 的小技巧 (*) {#other-trick} 6.5.1 重复使用代码块 6.5.2 在创建对象之前使用它 (*) {#use-creat} 6.5.3 提前退出编译 6.5.4 生成一个图像并在其他地方显示 6.5.5 修改前一个代码块中的图像 6.5.6 保存一组块选项并重复使用它们 (*) {#reuse-option} 6.5.7 使用 knitr::knit_expand() 来生成 Rmd 源代码 6.5.8 允许代码块中的标签重复 (*) {#repeat-label} 参考文献 "],["rmarkdown-project.html", "第 7 章 使用R Markdown开展项目工作 7.1 使用 R Markdown 在工作中管理项目 7.2 使用 R Markdown 实现工作流", " 第 7 章 使用R Markdown开展项目工作 7.1 使用 R Markdown 在工作中管理项目 7.1.1 来自外部的 R 脚本 7.1.2 将外部脚本读取到一个块中 7.1.3 从外部脚本读取多个代码块 (*) {#external-multi} 7.1.4 子文档 (*) {#child-document} 7.1.5 保留图像文件 7.1.6 R 代码块的工作目录 7.2 使用 R Markdown 实现工作流 7.2.1 使用 RStudio 键盘快捷键 7.2.2 R Markdown 的拼写检查 7.2.3 用 rmarkdown::render() 呈现 R Markdown 7.2.4 参数化的报告 7.2.5 自定义 Knit 按钮 (*) {#customize-button} 7.2.6 通过 Google Drive 对 Rmd 文档进行协作 7.2.7 用 workflowr 将R Markdown项目组织到一个研究网站上 7.2.8 使用 GitHub Actions 实现自动化部署 "],["references.html", "参考文献", " 参考文献 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
